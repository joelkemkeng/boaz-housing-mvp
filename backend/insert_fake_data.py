#!/usr/bin/env python3
"""
Script pour ins√©rer les donn√©es fictives depuis le fichier JSON

Ce script lit le fichier data/logements_fictifs.json et ins√®re tous les logements
dans la base de donn√©es.
"""
import json
import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://boaz_user:boaz_secure_password_2024@postgres:5432/boaz_housing_mvp")

def load_fake_data():
    """Charge les donn√©es fictives depuis le fichier JSON"""
    json_file = os.path.join(os.path.dirname(__file__), "data", "logements_fictifs.json")
    
    if not os.path.exists(json_file):
        raise FileNotFoundError(f"Fichier de donn√©es non trouv√©: {json_file}")
    
    with open(json_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def insert_fake_data():
    """Ins√®re les donn√©es fictives en base"""
    engine = create_engine(DATABASE_URL)
    
    with engine.connect() as connection:
        # V√©rifier s'il y a d√©j√† des donn√©es
        result = connection.execute(text("SELECT COUNT(*) FROM logements"))
        count = result.scalar()
        
        print(f"üìä {count} logements existants en base.")
        
        # Charger les donn√©es JSON
        logements_data = load_fake_data()
        print(f"üìÅ {len(logements_data)} logements charg√©s depuis le fichier JSON.")
        
        # Pr√©parer la requ√™te d'insertion
        insert_query = text("""
            INSERT INTO logements (titre, description, adresse, ville, code_postal, pays, 
                                 loyer, montant_charges, montant_total, statut, created_at)
            VALUES (:titre, :description, :adresse, :ville, :code_postal, :pays, 
                   :loyer, :montant_charges, :montant_total, :statut, NOW())
        """)
        
        # Ins√©rer tous les logements un par un
        inserted_count = 0
        for logement in logements_data:
            try:
                # Calculer montant_total
                logement['montant_total'] = logement['loyer'] + logement.get('montant_charges', 0)
                
                connection.execute(insert_query, logement)
                connection.commit()
                inserted_count += 1
                print(f"‚úÖ Ins√©r√©: {logement['titre']} ({logement['ville']} - {logement['statut']})")
                
            except Exception as e:
                connection.rollback()
                print(f"‚ùå Erreur pour {logement['titre']}: {e}")
                continue
        
        # Afficher les statistiques finales
        result = connection.execute(text("""
            SELECT statut, COUNT(*) as count 
            FROM logements 
            GROUP BY statut 
            ORDER BY statut
        """))
        
        stats = dict(result.fetchall())
        total = sum(stats.values())
        
        print(f"\n‚úÖ {inserted_count} logements fictifs ins√©r√©s avec succ√®s!")
        print(f"üìà Statistiques totales ({total} logements):")
        print(f"   üü¢ Disponibles: {stats.get('DISPONIBLE', 0)}")
        print(f"   üî¥ Occup√©s: {stats.get('OCCUPE', 0)}")
        print(f"   üü° Maintenance: {stats.get('MAINTENANCE', 0)}")

if __name__ == "__main__":
    try:
        print("üè† Script d'insertion de donn√©es fictives Boaz-Housing")
        print("=" * 55)
        
        insert_fake_data()
        
        print("\nüéâ Script termin√© avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        exit(1)